/*
 * -------------------------------------------------
 * rpd-rnaseq Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,140] ? 'retry' : 'finish' }
  maxRetries = 2
  maxErrors = '-1'

  // Process-specific resource requirements
  withName:readunit_merge {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:trim_galore {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:star {
    maxForks = 20
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
    errorStrategy = 'retry'
  }
  withName:collectRnaSeqMetrics {
    cpus = { check_max (16, 'cpus')}
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:rseqc {
    cpus = { check_max( 16, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName:rsem {
    cpus = { check_max( 16, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = 'retry'
  }
  withName:createBigWig {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = 'retry'
  }
  withName:multiqc {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }

}


params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}
