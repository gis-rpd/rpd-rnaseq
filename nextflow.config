// Configurable variables/defaults
/*
*/
params {
    keep_workdir = false
    container = 'fluidigm/c1/rnaseq/dev'
    nf_required_version = '0.29' // Minimum version of nextflow required
    help = false // awkward here, so how?
    mail_to = 'rpd@gis.a-star.edu.sg'
}

process.shell = ['/bin/bash', '-euo', 'pipefail']
report.enabled = true
trace.enabled = true
dag.enabled = true

//Deactivatetd for testing purpose
// clean up workdir. overwrroten by params.keep_workdir
// see https://github.com/nextflow-io/nextflow/issues/649
cleanup = true

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
    local {
      includeConfig 'conf/base.config'
      includeConfig 'conf/local.config'
      includeConfig 'conf/igenomes.config'
    }
    gis {
      includeConfig 'conf/base.config'
      includeConfig 'conf/gis.config'
      includeConfig 'conf/igenomes.config'
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
