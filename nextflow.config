// Configurable variables/defaults
/*
*/
params {
    container = 'rpd-rnaseq-1.1dev'
    nf_required_version = '0.30' // Minimum version of nextflow required
    help = false // awkward here, so how?
    mail_to = ''
    publishdir = 'results'
    tracedir = "${params.publishdir}/pipeline_info"

    // default params
    
    singleEnd = false

    trimming = false
    clip_r1 = 0
    clip_r2 = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0

    outFilterMultimapNmax = 0
    
    //Rsem optional values
   single_cell_prior = 0
    fragment_length_mean = 0
    fragment_length_sd = 0 
    calc_ci = 0
    
    forward_stranded = false
    reverse_stranded = false
    
    skip_qc = false

}

process.shell = ['/bin/bash', '-euo', 'pipefail']


timeline {
    enabled = true
    file = "${params.tracedir}/timeline.html"
}
report {
    enabled = true
    file = "${params.tracedir}/report.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/trace.txt"
}
dag {
    enabled = true
    file = "${params.tracedir}/dag.svg"
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
    local {
      includeConfig 'conf/base.config'
      includeConfig 'conf/local.config'
    }
    gis {
      includeConfig 'conf/base.config'
      includeConfig 'conf/gis.config'
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
